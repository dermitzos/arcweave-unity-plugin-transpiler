//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ArcscriptParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Arcweave.Transpiler
{
    using System;
    using System.IO;
    using System.Text;
    using System.Diagnostics;
    using System.Collections.Generic;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using DFA = Antlr4.Runtime.Dfa.DFA;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
    [System.CLSCompliant(false)]
    public partial class ArcscriptParser : ArcscriptParserBase
    {
        protected static DFA[] decisionToDFA;
        protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
        public const int
            CODESTART = 1, NORMALTEXT = 2, CODEEND = 3, MENTION_TAG_OPEN = 4, FLOAT = 5, INTEGER = 6,
            DIGIT = 7, LPAREN = 8, RPAREN = 9, ASSIGNMUL = 10, ASSIGNDIV = 11, ASSIGNADD = 12,
            ASSIGNSUB = 13, MUL = 14, DIV = 15, ADD = 16, SUB = 17, GE = 18, GT = 19, LE = 20, LT = 21,
            EQ = 22, NE = 23, AND = 24, OR = 25, ASSIGN = 26, NEG = 27, COMMA = 28, LBRACE = 29, RBRACE = 30,
            BOOLEAN = 31, FNAME = 32, VFNAME = 33, VFNAMEVARS = 34, IFKEYWORD = 35, ELSEKEYWORD = 36,
            ELSEIFKEYWORD = 37, ENDIFKEYWORD = 38, ANDKEYWORD = 39, ORKEYWORD = 40, ISKEYWORD = 41,
            NOTKEYWORD = 42, STRING = 43, VARIABLE = 44, WHITESPACE = 45, TAG_CLOSE = 46, ATTR_NAME = 47,
            TAG_EQUALS = 48, MENTION_TAG_CLOSE = 49, TAG_WHITESPACE = 50, TAG_OPEN = 51, MENTION_LABEL = 52,
            ATTR_VALUE = 53, ATTRIBUTE = 54;
        public const int
            RULE_input = 0, RULE_script = 1, RULE_script_section = 2, RULE_assignment_segment = 3,
            RULE_function_call_segment = 4, RULE_conditional_section = 5, RULE_if_section = 6,
            RULE_else_if_section = 7, RULE_else_section = 8, RULE_if_clause = 9, RULE_else_if_clause = 10,
            RULE_endif_segment = 11, RULE_statement_assignment = 12, RULE_statement_function_call = 13,
            RULE_argument_list = 14, RULE_argument = 15, RULE_mention = 16, RULE_mention_attributes = 17,
            RULE_additive_numeric_expression = 18, RULE_multiplicative_numeric_expression = 19,
            RULE_signed_unary_numeric_expression = 20, RULE_unary_numeric_expression = 21,
            RULE_function_call = 22, RULE_void_function_call = 23, RULE_sign = 24,
            RULE_variable_list = 25, RULE_compound_condition_or = 26, RULE_compound_condition_and = 27,
            RULE_negated_unary_condition = 28, RULE_unary_condition = 29, RULE_condition = 30,
            RULE_conditional_operator = 31, RULE_expression = 32;
        public static readonly string[] ruleNames = {
        "input", "script", "script_section", "assignment_segment", "function_call_segment",
        "conditional_section", "if_section", "else_if_section", "else_section",
        "if_clause", "else_if_clause", "endif_segment", "statement_assignment",
        "statement_function_call", "argument_list", "argument", "mention", "mention_attributes",
        "additive_numeric_expression", "multiplicative_numeric_expression", "signed_unary_numeric_expression",
        "unary_numeric_expression", "function_call", "void_function_call", "sign",
        "variable_list", "compound_condition_or", "compound_condition_and", "negated_unary_condition",
        "unary_condition", "condition", "conditional_operator", "expression"
    };

        private static readonly string[] _LiteralNames = {
        null, null, null, "'</code></pre>'", "'<span'", null, null, null, "'('",
        "')'", "'*='", "'/='", "'+='", "'-='", "'*'", "'/'", "'+'", "'-'", null,
        null, null, null, "'=='", "'!='", null, "'||'", null, "'!'", "','", "'{'",
        "'}'", null, null, "'show'", null, "'if'", "'else'", "'elseif'", "'endif'",
        "'and'", "'or'", "'is'", "'not'", null, null, null, "'>'", null, null,
        "'/span>'", null, "'<'"
    };
        private static readonly string[] _SymbolicNames = {
        null, "CODESTART", "NORMALTEXT", "CODEEND", "MENTION_TAG_OPEN", "FLOAT",
        "INTEGER", "DIGIT", "LPAREN", "RPAREN", "ASSIGNMUL", "ASSIGNDIV", "ASSIGNADD",
        "ASSIGNSUB", "MUL", "DIV", "ADD", "SUB", "GE", "GT", "LE", "LT", "EQ",
        "NE", "AND", "OR", "ASSIGN", "NEG", "COMMA", "LBRACE", "RBRACE", "BOOLEAN",
        "FNAME", "VFNAME", "VFNAMEVARS", "IFKEYWORD", "ELSEKEYWORD", "ELSEIFKEYWORD",
        "ENDIFKEYWORD", "ANDKEYWORD", "ORKEYWORD", "ISKEYWORD", "NOTKEYWORD",
        "STRING", "VARIABLE", "WHITESPACE", "TAG_CLOSE", "ATTR_NAME", "TAG_EQUALS",
        "MENTION_TAG_CLOSE", "TAG_WHITESPACE", "TAG_OPEN", "MENTION_LABEL", "ATTR_VALUE",
        "ATTRIBUTE"
    };
        public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

        [NotNull]
        public override IVocabulary Vocabulary
        {
            get
            {
                return DefaultVocabulary;
            }
        }

        public override string GrammarFileName { get { return "ArcscriptParser.g4"; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override int[] SerializedAtn { get { return _serializedATN; } }

        static ArcscriptParser()
        {
            decisionToDFA = new DFA[_ATN.NumberOfDecisions];
            for (int i = 0; i < _ATN.NumberOfDecisions; i++)
            {
                decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
            }
        }

        public ArcscriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

        public ArcscriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
        : base(input, output, errorOutput)
        {
            Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
        }

        public partial class InputContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public ScriptContext script()
            {
                return GetRuleContext<ScriptContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ArcscriptParser.Eof, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Compound_condition_orContext compound_condition_or()
            {
                return GetRuleContext<Compound_condition_orContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
            public InputContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_input; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInput(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public InputContext input()
        {
            InputContext _localctx = new InputContext(Context, State);
            EnterRule(_localctx, 0, RULE_input);
            try
            {
                State = 74;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 0, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 66;
                            script();
                            State = 67;
                            Match(Eof);
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 69;
                            Match(CODESTART);
                            State = 70;
                            compound_condition_or();
                            State = 71;
                            Match(CODEEND);
                            State = 72;
                            Match(Eof);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ScriptContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public Script_sectionContext[] script_section()
            {
                return GetRuleContexts<Script_sectionContext>();
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Script_sectionContext script_section(int i)
            {
                return GetRuleContext<Script_sectionContext>(i);
            }
            public ScriptContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_script; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitScript(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ScriptContext script()
        {
            ScriptContext _localctx = new ScriptContext(Context, State);
            EnterRule(_localctx, 2, RULE_script);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 77;
                    ErrorHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 76;
                                        script_section();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 79;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 1, Context);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Script_sectionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NORMALTEXT() { return GetTokens(ArcscriptParser.NORMALTEXT); }
            [System.Diagnostics.DebuggerNonUserCode]
            public ITerminalNode NORMALTEXT(int i)
            {
                return GetToken(ArcscriptParser.NORMALTEXT, i);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Assignment_segmentContext assignment_segment()
            {
                return GetRuleContext<Assignment_segmentContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Function_call_segmentContext function_call_segment()
            {
                return GetRuleContext<Function_call_segmentContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Conditional_sectionContext conditional_section()
            {
                return GetRuleContext<Conditional_sectionContext>(0);
            }
            public Script_sectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_script_section; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitScript_section(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Script_sectionContext script_section()
        {
            Script_sectionContext _localctx = new Script_sectionContext(Context, State);
            EnterRule(_localctx, 4, RULE_script_section);
            try
            {
                int _alt;
                State = 89;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 3, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 82;
                            ErrorHandler.Sync(this);
                            _alt = 1;
                            do
                            {
                                switch (_alt)
                                {
                                    case 1:
                                        {
                                            {
                                                State = 81;
                                                Match(NORMALTEXT);
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 84;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 2, Context);
                            } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 86;
                            assignment_segment();
                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 87;
                            function_call_segment();
                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 88;
                            conditional_section();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Assignment_segmentContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Statement_assignmentContext statement_assignment()
            {
                return GetRuleContext<Statement_assignmentContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
            public Assignment_segmentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_assignment_segment; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAssignment_segment(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Assignment_segmentContext assignment_segment()
        {
            Assignment_segmentContext _localctx = new Assignment_segmentContext(Context, State);
            EnterRule(_localctx, 6, RULE_assignment_segment);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 91;
                    Match(CODESTART);
                    State = 92;
                    statement_assignment();
                    State = 93;
                    Match(CODEEND);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Function_call_segmentContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Statement_function_callContext statement_function_call()
            {
                return GetRuleContext<Statement_function_callContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
            public Function_call_segmentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_function_call_segment; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunction_call_segment(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Function_call_segmentContext function_call_segment()
        {
            Function_call_segmentContext _localctx = new Function_call_segmentContext(Context, State);
            EnterRule(_localctx, 8, RULE_function_call_segment);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 95;
                    Match(CODESTART);
                    State = 96;
                    statement_function_call();
                    State = 97;
                    Match(CODEEND);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Conditional_sectionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public If_sectionContext if_section()
            {
                return GetRuleContext<If_sectionContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Endif_segmentContext endif_segment()
            {
                return GetRuleContext<Endif_segmentContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Else_if_sectionContext[] else_if_section()
            {
                return GetRuleContexts<Else_if_sectionContext>();
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Else_if_sectionContext else_if_section(int i)
            {
                return GetRuleContext<Else_if_sectionContext>(i);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Else_sectionContext else_section()
            {
                return GetRuleContext<Else_sectionContext>(0);
            }
            public Conditional_sectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_conditional_section; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConditional_section(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Conditional_sectionContext conditional_section()
        {
            Conditional_sectionContext _localctx = new Conditional_sectionContext(Context, State);
            EnterRule(_localctx, 10, RULE_conditional_section);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 99;
                    if_section();
                    State = 103;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 4, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 100;
                                    else_if_section();
                                }
                            }
                        }
                        State = 105;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 4, Context);
                    }
                    State = 107;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 5, Context))
                    {
                        case 1:
                            {
                                State = 106;
                                else_section();
                            }
                            break;
                    }
                    State = 109;
                    endif_segment();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class If_sectionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public If_clauseContext if_clause()
            {
                return GetRuleContext<If_clauseContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public ScriptContext script()
            {
                return GetRuleContext<ScriptContext>(0);
            }
            public If_sectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_if_section; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIf_section(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public If_sectionContext if_section()
        {
            If_sectionContext _localctx = new If_sectionContext(Context, State);
            EnterRule(_localctx, 12, RULE_if_section);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 111;
                    Match(CODESTART);
                    State = 112;
                    if_clause();
                    State = 113;
                    Match(CODEEND);
                    State = 114;
                    script();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Else_if_sectionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Else_if_clauseContext else_if_clause()
            {
                return GetRuleContext<Else_if_clauseContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public ScriptContext script()
            {
                return GetRuleContext<ScriptContext>(0);
            }
            public Else_if_sectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_else_if_section; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitElse_if_section(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Else_if_sectionContext else_if_section()
        {
            Else_if_sectionContext _localctx = new Else_if_sectionContext(Context, State);
            EnterRule(_localctx, 14, RULE_else_if_section);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 116;
                    Match(CODESTART);
                    State = 117;
                    else_if_clause();
                    State = 118;
                    Match(CODEEND);
                    State = 119;
                    script();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Else_sectionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEKEYWORD() { return GetToken(ArcscriptParser.ELSEKEYWORD, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public ScriptContext script()
            {
                return GetRuleContext<ScriptContext>(0);
            }
            public Else_sectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_else_section; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitElse_section(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Else_sectionContext else_section()
        {
            Else_sectionContext _localctx = new Else_sectionContext(Context, State);
            EnterRule(_localctx, 16, RULE_else_section);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 121;
                    Match(CODESTART);
                    State = 122;
                    Match(ELSEKEYWORD);
                    State = 123;
                    Match(CODEEND);
                    State = 124;
                    script();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class If_clauseContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFKEYWORD() { return GetToken(ArcscriptParser.IFKEYWORD, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Compound_condition_orContext compound_condition_or()
            {
                return GetRuleContext<Compound_condition_orContext>(0);
            }
            public If_clauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_if_clause; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public If_clauseContext if_clause()
        {
            If_clauseContext _localctx = new If_clauseContext(Context, State);
            EnterRule(_localctx, 18, RULE_if_clause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 126;
                    Match(IFKEYWORD);
                    State = 127;
                    compound_condition_or();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Else_if_clauseContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIFKEYWORD() { return GetToken(ArcscriptParser.ELSEIFKEYWORD, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Compound_condition_orContext compound_condition_or()
            {
                return GetRuleContext<Compound_condition_orContext>(0);
            }
            public Else_if_clauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_else_if_clause; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitElse_if_clause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Else_if_clauseContext else_if_clause()
        {
            Else_if_clauseContext _localctx = new Else_if_clauseContext(Context, State);
            EnterRule(_localctx, 20, RULE_else_if_clause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 129;
                    Match(ELSEIFKEYWORD);
                    State = 130;
                    compound_condition_or();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Endif_segmentContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODESTART() { return GetToken(ArcscriptParser.CODESTART, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIFKEYWORD() { return GetToken(ArcscriptParser.ENDIFKEYWORD, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODEEND() { return GetToken(ArcscriptParser.CODEEND, 0); }
            public Endif_segmentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_endif_segment; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEndif_segment(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Endif_segmentContext endif_segment()
        {
            Endif_segmentContext _localctx = new Endif_segmentContext(Context, State);
            EnterRule(_localctx, 22, RULE_endif_segment);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 132;
                    Match(CODESTART);
                    State = 133;
                    Match(ENDIFKEYWORD);
                    State = 134;
                    Match(CODEEND);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Statement_assignmentContext : ParserRuleContext
        {
            public IToken _VARIABLE;
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ArcscriptParser.VARIABLE, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Compound_condition_orContext compound_condition_or()
            {
                return GetRuleContext<Compound_condition_orContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNADD() { return GetToken(ArcscriptParser.ASSIGNADD, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNSUB() { return GetToken(ArcscriptParser.ASSIGNSUB, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMUL() { return GetToken(ArcscriptParser.ASSIGNMUL, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNDIV() { return GetToken(ArcscriptParser.ASSIGNDIV, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ArcscriptParser.ASSIGN, 0); }
            public Statement_assignmentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_statement_assignment; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStatement_assignment(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Statement_assignmentContext statement_assignment()
        {
            Statement_assignmentContext _localctx = new Statement_assignmentContext(Context, State);
            EnterRule(_localctx, 24, RULE_statement_assignment);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 136;
                    _localctx._VARIABLE = Match(VARIABLE);
                    State = 137;
                    _la = TokenStream.LA(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 67124224L) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                    State = 138;
                    compound_condition_or();
                    this.assertVariable(_localctx._VARIABLE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Statement_function_callContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public Void_function_callContext void_function_call()
            {
                return GetRuleContext<Void_function_callContext>(0);
            }
            public Statement_function_callContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_statement_function_call; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStatement_function_call(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Statement_function_callContext statement_function_call()
        {
            Statement_function_callContext _localctx = new Statement_function_callContext(Context, State);
            EnterRule(_localctx, 26, RULE_statement_function_call);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 141;
                    void_function_call();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Argument_listContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public ArgumentContext[] argument()
            {
                return GetRuleContexts<ArgumentContext>();
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public ArgumentContext argument(int i)
            {
                return GetRuleContext<ArgumentContext>(i);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ArcscriptParser.COMMA); }
            [System.Diagnostics.DebuggerNonUserCode]
            public ITerminalNode COMMA(int i)
            {
                return GetToken(ArcscriptParser.COMMA, i);
            }
            public Argument_listContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argument_list; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Argument_listContext argument_list()
        {
            Argument_listContext _localctx = new Argument_listContext(Context, State);
            EnterRule(_localctx, 28, RULE_argument_list);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 143;
                    argument();
                    State = 148;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == COMMA)
                    {
                        {
                            {
                                State = 144;
                                Match(COMMA);
                                State = 145;
                                argument();
                            }
                        }
                        State = 150;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgumentContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public Additive_numeric_expressionContext additive_numeric_expression()
            {
                return GetRuleContext<Additive_numeric_expressionContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArcscriptParser.STRING, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public MentionContext mention()
            {
                return GetRuleContext<MentionContext>(0);
            }
            public ArgumentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argument; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgument(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgumentContext argument()
        {
            ArgumentContext _localctx = new ArgumentContext(Context, State);
            EnterRule(_localctx, 30, RULE_argument);
            try
            {
                State = 154;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case FLOAT:
                    case INTEGER:
                    case LPAREN:
                    case ADD:
                    case SUB:
                    case FNAME:
                    case VARIABLE:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 151;
                            additive_numeric_expression();
                        }
                        break;
                    case STRING:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 152;
                            Match(STRING);
                        }
                        break;
                    case MENTION_TAG_OPEN:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 153;
                            mention();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MentionContext : ParserRuleContext
        {
            public Mention_attributesContext _mention_attributes;
            public IList<Mention_attributesContext> _attr = new List<Mention_attributesContext>();
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_TAG_OPEN() { return GetToken(ArcscriptParser.MENTION_TAG_OPEN, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_CLOSE() { return GetToken(ArcscriptParser.TAG_CLOSE, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_OPEN() { return GetToken(ArcscriptParser.TAG_OPEN, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_TAG_CLOSE() { return GetToken(ArcscriptParser.MENTION_TAG_CLOSE, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENTION_LABEL() { return GetToken(ArcscriptParser.MENTION_LABEL, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Mention_attributesContext[] mention_attributes()
            {
                return GetRuleContexts<Mention_attributesContext>();
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Mention_attributesContext mention_attributes(int i)
            {
                return GetRuleContext<Mention_attributesContext>(i);
            }
            public MentionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_mention; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMention(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MentionContext mention()
        {
            MentionContext _localctx = new MentionContext(Context, State);
            EnterRule(_localctx, 32, RULE_mention);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 156;
                    Match(MENTION_TAG_OPEN);
                    State = 160;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == ATTR_NAME)
                    {
                        {
                            {
                                State = 157;
                                _localctx._mention_attributes = mention_attributes();
                                _localctx._attr.Add(_localctx._mention_attributes);
                            }
                        }
                        State = 162;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 163;
                    Match(TAG_CLOSE);
                    State = 165;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == MENTION_LABEL)
                    {
                        {
                            State = 164;
                            Match(MENTION_LABEL);
                        }
                    }

                    State = 167;
                    Match(TAG_OPEN);
                    State = 168;
                    Match(MENTION_TAG_CLOSE);
                    State = 169;
                    if (!(this.assertMention(_localctx._attr))) throw new FailedPredicateException(this, "this.assertMention($attr)");
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Mention_attributesContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR_NAME() { return GetToken(ArcscriptParser.ATTR_NAME, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_EQUALS() { return GetToken(ArcscriptParser.TAG_EQUALS, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR_VALUE() { return GetToken(ArcscriptParser.ATTR_VALUE, 0); }
            public Mention_attributesContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_mention_attributes; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMention_attributes(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Mention_attributesContext mention_attributes()
        {
            Mention_attributesContext _localctx = new Mention_attributesContext(Context, State);
            EnterRule(_localctx, 34, RULE_mention_attributes);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 171;
                    Match(ATTR_NAME);
                    State = 174;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == TAG_EQUALS)
                    {
                        {
                            State = 172;
                            Match(TAG_EQUALS);
                            State = 173;
                            Match(ATTR_VALUE);
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Additive_numeric_expressionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public Multiplicative_numeric_expressionContext multiplicative_numeric_expression()
            {
                return GetRuleContext<Multiplicative_numeric_expressionContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Additive_numeric_expressionContext additive_numeric_expression()
            {
                return GetRuleContext<Additive_numeric_expressionContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ArcscriptParser.ADD, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ArcscriptParser.SUB, 0); }
            public Additive_numeric_expressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_additive_numeric_expression; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAdditive_numeric_expression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Additive_numeric_expressionContext additive_numeric_expression()
        {
            Additive_numeric_expressionContext _localctx = new Additive_numeric_expressionContext(Context, State);
            EnterRule(_localctx, 36, RULE_additive_numeric_expression);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 176;
                    multiplicative_numeric_expression();
                    State = 179;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == ADD || _la == SUB)
                    {
                        {
                            State = 177;
                            _la = TokenStream.LA(1);
                            if (!(_la == ADD || _la == SUB))
                            {
                                ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                            State = 178;
                            additive_numeric_expression();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Multiplicative_numeric_expressionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public Signed_unary_numeric_expressionContext signed_unary_numeric_expression()
            {
                return GetRuleContext<Signed_unary_numeric_expressionContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Multiplicative_numeric_expressionContext multiplicative_numeric_expression()
            {
                return GetRuleContext<Multiplicative_numeric_expressionContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ArcscriptParser.MUL, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ArcscriptParser.DIV, 0); }
            public Multiplicative_numeric_expressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_multiplicative_numeric_expression; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMultiplicative_numeric_expression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Multiplicative_numeric_expressionContext multiplicative_numeric_expression()
        {
            Multiplicative_numeric_expressionContext _localctx = new Multiplicative_numeric_expressionContext(Context, State);
            EnterRule(_localctx, 38, RULE_multiplicative_numeric_expression);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 181;
                    signed_unary_numeric_expression();
                    State = 184;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == MUL || _la == DIV)
                    {
                        {
                            State = 182;
                            _la = TokenStream.LA(1);
                            if (!(_la == MUL || _la == DIV))
                            {
                                ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                            State = 183;
                            multiplicative_numeric_expression();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Signed_unary_numeric_expressionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public SignContext sign()
            {
                return GetRuleContext<SignContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Unary_numeric_expressionContext unary_numeric_expression()
            {
                return GetRuleContext<Unary_numeric_expressionContext>(0);
            }
            public Signed_unary_numeric_expressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_signed_unary_numeric_expression; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSigned_unary_numeric_expression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Signed_unary_numeric_expressionContext signed_unary_numeric_expression()
        {
            Signed_unary_numeric_expressionContext _localctx = new Signed_unary_numeric_expressionContext(Context, State);
            EnterRule(_localctx, 40, RULE_signed_unary_numeric_expression);
            try
            {
                State = 190;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case ADD:
                    case SUB:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 186;
                            sign();
                            State = 187;
                            unary_numeric_expression();
                        }
                        break;
                    case FLOAT:
                    case INTEGER:
                    case LPAREN:
                    case FNAME:
                    case VARIABLE:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 189;
                            unary_numeric_expression();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Unary_numeric_expressionContext : ParserRuleContext
        {
            public IToken _VARIABLE;
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ArcscriptParser.FLOAT, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ArcscriptParser.VARIABLE, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ArcscriptParser.INTEGER, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Function_callContext function_call()
            {
                return GetRuleContext<Function_callContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Compound_condition_orContext compound_condition_or()
            {
                return GetRuleContext<Compound_condition_orContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
            public Unary_numeric_expressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unary_numeric_expression; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnary_numeric_expression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Unary_numeric_expressionContext unary_numeric_expression()
        {
            Unary_numeric_expressionContext _localctx = new Unary_numeric_expressionContext(Context, State);
            EnterRule(_localctx, 42, RULE_unary_numeric_expression);
            try
            {
                State = 201;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case FLOAT:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 192;
                            Match(FLOAT);
                        }
                        break;
                    case VARIABLE:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 193;
                            _localctx._VARIABLE = Match(VARIABLE);
                            this.assertVariable(_localctx._VARIABLE);
                        }
                        break;
                    case INTEGER:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 195;
                            Match(INTEGER);
                        }
                        break;
                    case FNAME:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 196;
                            function_call();
                        }
                        break;
                    case LPAREN:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 197;
                            Match(LPAREN);
                            State = 198;
                            compound_condition_or();
                            State = 199;
                            Match(RPAREN);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Function_callContext : ParserRuleContext
        {
            public IToken _FNAME;
            public Argument_listContext _argument_list;
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FNAME() { return GetToken(ArcscriptParser.FNAME, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Argument_listContext argument_list()
            {
                return GetRuleContext<Argument_listContext>(0);
            }
            public Function_callContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_function_call; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Function_callContext function_call()
        {
            Function_callContext _localctx = new Function_callContext(Context, State);
            EnterRule(_localctx, 44, RULE_function_call);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 203;
                    _localctx._FNAME = Match(FNAME);
                    State = 204;
                    Match(LPAREN);
                    State = 206;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26392574230896L) != 0))
                    {
                        {
                            State = 205;
                            _localctx._argument_list = argument_list();
                        }
                    }

                    State = 208;
                    Match(RPAREN);
                    this.assertFunctionArguments(_localctx._FNAME, _localctx._argument_list);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Void_function_callContext : ParserRuleContext
        {
            public IToken _VFNAME;
            public Argument_listContext _argument_list;
            public IToken _VFNAMEVARS;
            public Variable_listContext _variable_list;
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VFNAME() { return GetToken(ArcscriptParser.VFNAME, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ArcscriptParser.LPAREN, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ArcscriptParser.RPAREN, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Argument_listContext argument_list()
            {
                return GetRuleContext<Argument_listContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VFNAMEVARS() { return GetToken(ArcscriptParser.VFNAMEVARS, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Variable_listContext variable_list()
            {
                return GetRuleContext<Variable_listContext>(0);
            }
            public Void_function_callContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_void_function_call; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVoid_function_call(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Void_function_callContext void_function_call()
        {
            Void_function_callContext _localctx = new Void_function_callContext(Context, State);
            EnterRule(_localctx, 46, RULE_void_function_call);
            int _la;
            try
            {
                State = 225;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case VFNAME:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 211;
                            _localctx._VFNAME = Match(VFNAME);
                            State = 212;
                            Match(LPAREN);
                            State = 214;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26392574230896L) != 0))
                            {
                                {
                                    State = 213;
                                    _localctx._argument_list = argument_list();
                                }
                            }

                            State = 216;
                            Match(RPAREN);
                            this.assertFunctionArguments(_localctx._VFNAME, _localctx._argument_list);
                        }
                        break;
                    case VFNAMEVARS:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 218;
                            _localctx._VFNAMEVARS = Match(VFNAMEVARS);
                            State = 219;
                            Match(LPAREN);
                            State = 221;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == VARIABLE)
                            {
                                {
                                    State = 220;
                                    _localctx._variable_list = variable_list();
                                }
                            }

                            State = 223;
                            Match(RPAREN);
                            this.assertFunctionArguments(_localctx._VFNAMEVARS, _localctx._variable_list);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SignContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ArcscriptParser.ADD, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ArcscriptParser.SUB, 0); }
            public SignContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sign; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSign(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SignContext sign()
        {
            SignContext _localctx = new SignContext(Context, State);
            EnterRule(_localctx, 48, RULE_sign);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 227;
                    _la = TokenStream.LA(1);
                    if (!(_la == ADD || _la == SUB))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Variable_listContext : ParserRuleContext
        {
            public IToken _VARIABLE;
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(ArcscriptParser.VARIABLE); }
            [System.Diagnostics.DebuggerNonUserCode]
            public ITerminalNode VARIABLE(int i)
            {
                return GetToken(ArcscriptParser.VARIABLE, i);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ArcscriptParser.COMMA); }
            [System.Diagnostics.DebuggerNonUserCode]
            public ITerminalNode COMMA(int i)
            {
                return GetToken(ArcscriptParser.COMMA, i);
            }
            public Variable_listContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variable_list; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariable_list(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Variable_listContext variable_list()
        {
            Variable_listContext _localctx = new Variable_listContext(Context, State);
            EnterRule(_localctx, 50, RULE_variable_list);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 229;
                    _localctx._VARIABLE = Match(VARIABLE);
                    State = 234;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == COMMA)
                    {
                        {
                            {
                                State = 230;
                                Match(COMMA);
                                State = 231;
                                _localctx._VARIABLE = Match(VARIABLE);
                            }
                        }
                        State = 236;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    this.assertVariable(_localctx._VARIABLE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Compound_condition_orContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public Compound_condition_andContext compound_condition_and()
            {
                return GetRuleContext<Compound_condition_andContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Compound_condition_orContext compound_condition_or()
            {
                return GetRuleContext<Compound_condition_orContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ArcscriptParser.OR, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORKEYWORD() { return GetToken(ArcscriptParser.ORKEYWORD, 0); }
            public Compound_condition_orContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_compound_condition_or; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCompound_condition_or(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Compound_condition_orContext compound_condition_or()
        {
            Compound_condition_orContext _localctx = new Compound_condition_orContext(Context, State);
            EnterRule(_localctx, 52, RULE_compound_condition_or);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 239;
                    compound_condition_and();
                    State = 242;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == OR || _la == ORKEYWORD)
                    {
                        {
                            State = 240;
                            _la = TokenStream.LA(1);
                            if (!(_la == OR || _la == ORKEYWORD))
                            {
                                ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                            State = 241;
                            compound_condition_or();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Compound_condition_andContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public Negated_unary_conditionContext negated_unary_condition()
            {
                return GetRuleContext<Negated_unary_conditionContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Compound_condition_andContext compound_condition_and()
            {
                return GetRuleContext<Compound_condition_andContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ArcscriptParser.AND, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDKEYWORD() { return GetToken(ArcscriptParser.ANDKEYWORD, 0); }
            public Compound_condition_andContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_compound_condition_and; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCompound_condition_and(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Compound_condition_andContext compound_condition_and()
        {
            Compound_condition_andContext _localctx = new Compound_condition_andContext(Context, State);
            EnterRule(_localctx, 54, RULE_compound_condition_and);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 244;
                    negated_unary_condition();
                    State = 247;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == AND || _la == ANDKEYWORD)
                    {
                        {
                            State = 245;
                            _la = TokenStream.LA(1);
                            if (!(_la == AND || _la == ANDKEYWORD))
                            {
                                ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                            State = 246;
                            compound_condition_and();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Negated_unary_conditionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public Unary_conditionContext unary_condition()
            {
                return GetRuleContext<Unary_conditionContext>(0);
            }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEG() { return GetToken(ArcscriptParser.NEG, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTKEYWORD() { return GetToken(ArcscriptParser.NOTKEYWORD, 0); }
            public Negated_unary_conditionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_negated_unary_condition; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitNegated_unary_condition(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Negated_unary_conditionContext negated_unary_condition()
        {
            Negated_unary_conditionContext _localctx = new Negated_unary_conditionContext(Context, State);
            EnterRule(_localctx, 56, RULE_negated_unary_condition);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 250;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == NEG || _la == NOTKEYWORD)
                    {
                        {
                            State = 249;
                            _la = TokenStream.LA(1);
                            if (!(_la == NEG || _la == NOTKEYWORD))
                            {
                                ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                    }

                    State = 252;
                    unary_condition();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Unary_conditionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public ConditionContext condition()
            {
                return GetRuleContext<ConditionContext>(0);
            }
            public Unary_conditionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unary_condition; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnary_condition(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Unary_conditionContext unary_condition()
        {
            Unary_conditionContext _localctx = new Unary_conditionContext(Context, State);
            EnterRule(_localctx, 58, RULE_unary_condition);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 254;
                    condition();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ConditionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode]
            public ExpressionContext[] expression()
            {
                return GetRuleContexts<ExpressionContext>();
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public ExpressionContext expression(int i)
            {
                return GetRuleContext<ExpressionContext>(i);
            }
            [System.Diagnostics.DebuggerNonUserCode]
            public Conditional_operatorContext conditional_operator()
            {
                return GetRuleContext<Conditional_operatorContext>(0);
            }
            public ConditionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_condition; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCondition(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ConditionContext condition()
        {
            ConditionContext _localctx = new ConditionContext(Context, State);
            EnterRule(_localctx, 60, RULE_condition);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 256;
                    expression();
                    State = 260;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2199039770624L) != 0))
                    {
                        {
                            State = 257;
                            conditional_operator();
                            State = 258;
                            expression();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Conditional_operatorContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ArcscriptParser.GT, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ArcscriptParser.GE, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ArcscriptParser.LT, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ArcscriptParser.LE, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ArcscriptParser.EQ, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ArcscriptParser.NE, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISKEYWORD() { return GetToken(ArcscriptParser.ISKEYWORD, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTKEYWORD() { return GetToken(ArcscriptParser.NOTKEYWORD, 0); }
            public Conditional_operatorContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_conditional_operator; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConditional_operator(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public Conditional_operatorContext conditional_operator()
        {
            Conditional_operatorContext _localctx = new Conditional_operatorContext(Context, State);
            EnterRule(_localctx, 62, RULE_conditional_operator);
            try
            {
                State = 271;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 24, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 262;
                            Match(GT);
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 263;
                            Match(GE);
                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 264;
                            Match(LT);
                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 265;
                            Match(LE);
                        }
                        break;
                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 266;
                            Match(EQ);
                        }
                        break;
                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 267;
                            Match(NE);
                        }
                        break;
                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 268;
                            Match(ISKEYWORD);
                        }
                        break;
                    case 8:
                        EnterOuterAlt(_localctx, 8);
                        {
                            State = 269;
                            Match(ISKEYWORD);
                            State = 270;
                            Match(NOTKEYWORD);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExpressionContext : ParserRuleContext
        {
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArcscriptParser.STRING, 0); }
            [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ArcscriptParser.BOOLEAN, 0); }
            [System.Diagnostics.DebuggerNonUserCode]
            public Additive_numeric_expressionContext additive_numeric_expression()
            {
                return GetRuleContext<Additive_numeric_expressionContext>(0);
            }
            public ExpressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_expression; } }
            [System.Diagnostics.DebuggerNonUserCode]
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IArcscriptParserVisitor<TResult> typedVisitor = visitor as IArcscriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExpression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExpressionContext expression()
        {
            ExpressionContext _localctx = new ExpressionContext(Context, State);
            EnterRule(_localctx, 64, RULE_expression);
            try
            {
                State = 276;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case STRING:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 273;
                            Match(STRING);
                        }
                        break;
                    case BOOLEAN:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 274;
                            Match(BOOLEAN);
                        }
                        break;
                    case FLOAT:
                    case INTEGER:
                    case LPAREN:
                    case ADD:
                    case SUB:
                    case FNAME:
                    case VARIABLE:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 275;
                            additive_numeric_expression();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
        {
            switch (ruleIndex)
            {
                case 16: return mention_sempred((MentionContext)_localctx, predIndex);
            }
            return true;
        }
        private bool mention_sempred(MentionContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 0: return this.assertMention(_localctx._attr);
            }
            return true;
        }

        private static int[] _serializedATN = {
        4,1,54,279,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
        7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
        2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
        2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
        2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,3,0,75,8,0,1,1,4,1,78,8,1,11,1,12,1,79,1,2,4,2,83,8,2,11,2,12,2,84,1,
        2,1,2,1,2,3,2,90,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,5,5,102,8,
        5,10,5,12,5,105,9,5,1,5,3,5,108,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,5,14,147,8,
        14,10,14,12,14,150,9,14,1,15,1,15,1,15,3,15,155,8,15,1,16,1,16,5,16,159,
        8,16,10,16,12,16,162,9,16,1,16,1,16,3,16,166,8,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,3,17,175,8,17,1,18,1,18,1,18,3,18,180,8,18,1,19,1,19,1,
        19,3,19,185,8,19,1,20,1,20,1,20,1,20,3,20,191,8,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,3,21,202,8,21,1,22,1,22,1,22,3,22,207,8,22,1,
        22,1,22,1,22,1,23,1,23,1,23,3,23,215,8,23,1,23,1,23,1,23,1,23,1,23,3,23,
        222,8,23,1,23,1,23,3,23,226,8,23,1,24,1,24,1,25,1,25,1,25,5,25,233,8,25,
        10,25,12,25,236,9,25,1,25,1,25,1,26,1,26,1,26,3,26,243,8,26,1,27,1,27,
        1,27,3,27,248,8,27,1,28,3,28,251,8,28,1,28,1,28,1,29,1,29,1,30,1,30,1,
        30,1,30,3,30,261,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
        272,8,31,1,32,1,32,1,32,3,32,277,8,32,1,32,0,0,33,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        0,6,2,0,10,13,26,26,1,0,16,17,1,0,14,15,2,0,25,25,40,40,2,0,24,24,39,39,
        2,0,27,27,42,42,284,0,74,1,0,0,0,2,77,1,0,0,0,4,89,1,0,0,0,6,91,1,0,0,
        0,8,95,1,0,0,0,10,99,1,0,0,0,12,111,1,0,0,0,14,116,1,0,0,0,16,121,1,0,
        0,0,18,126,1,0,0,0,20,129,1,0,0,0,22,132,1,0,0,0,24,136,1,0,0,0,26,141,
        1,0,0,0,28,143,1,0,0,0,30,154,1,0,0,0,32,156,1,0,0,0,34,171,1,0,0,0,36,
        176,1,0,0,0,38,181,1,0,0,0,40,190,1,0,0,0,42,201,1,0,0,0,44,203,1,0,0,
        0,46,225,1,0,0,0,48,227,1,0,0,0,50,229,1,0,0,0,52,239,1,0,0,0,54,244,1,
        0,0,0,56,250,1,0,0,0,58,254,1,0,0,0,60,256,1,0,0,0,62,271,1,0,0,0,64,276,
        1,0,0,0,66,67,3,2,1,0,67,68,5,0,0,1,68,75,1,0,0,0,69,70,5,1,0,0,70,71,
        3,52,26,0,71,72,5,3,0,0,72,73,5,0,0,1,73,75,1,0,0,0,74,66,1,0,0,0,74,69,
        1,0,0,0,75,1,1,0,0,0,76,78,3,4,2,0,77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,
        0,0,0,79,80,1,0,0,0,80,3,1,0,0,0,81,83,5,2,0,0,82,81,1,0,0,0,83,84,1,0,
        0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,90,1,0,0,0,86,90,3,6,3,0,87,90,3,8,
        4,0,88,90,3,10,5,0,89,82,1,0,0,0,89,86,1,0,0,0,89,87,1,0,0,0,89,88,1,0,
        0,0,90,5,1,0,0,0,91,92,5,1,0,0,92,93,3,24,12,0,93,94,5,3,0,0,94,7,1,0,
        0,0,95,96,5,1,0,0,96,97,3,26,13,0,97,98,5,3,0,0,98,9,1,0,0,0,99,103,3,
        12,6,0,100,102,3,14,7,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,
        0,103,104,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,106,108,3,16,8,0,107,
        106,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,3,22,11,0,110,11,1,
        0,0,0,111,112,5,1,0,0,112,113,3,18,9,0,113,114,5,3,0,0,114,115,3,2,1,0,
        115,13,1,0,0,0,116,117,5,1,0,0,117,118,3,20,10,0,118,119,5,3,0,0,119,120,
        3,2,1,0,120,15,1,0,0,0,121,122,5,1,0,0,122,123,5,36,0,0,123,124,5,3,0,
        0,124,125,3,2,1,0,125,17,1,0,0,0,126,127,5,35,0,0,127,128,3,52,26,0,128,
        19,1,0,0,0,129,130,5,37,0,0,130,131,3,52,26,0,131,21,1,0,0,0,132,133,5,
        1,0,0,133,134,5,38,0,0,134,135,5,3,0,0,135,23,1,0,0,0,136,137,5,44,0,0,
        137,138,7,0,0,0,138,139,3,52,26,0,139,140,6,12,-1,0,140,25,1,0,0,0,141,
        142,3,46,23,0,142,27,1,0,0,0,143,148,3,30,15,0,144,145,5,28,0,0,145,147,
        3,30,15,0,146,144,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,
        0,0,149,29,1,0,0,0,150,148,1,0,0,0,151,155,3,36,18,0,152,155,5,43,0,0,
        153,155,3,32,16,0,154,151,1,0,0,0,154,152,1,0,0,0,154,153,1,0,0,0,155,
        31,1,0,0,0,156,160,5,4,0,0,157,159,3,34,17,0,158,157,1,0,0,0,159,162,1,
        0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,
        163,165,5,46,0,0,164,166,5,52,0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,
        167,1,0,0,0,167,168,5,51,0,0,168,169,5,49,0,0,169,170,4,16,0,1,170,33,
        1,0,0,0,171,174,5,47,0,0,172,173,5,48,0,0,173,175,5,53,0,0,174,172,1,0,
        0,0,174,175,1,0,0,0,175,35,1,0,0,0,176,179,3,38,19,0,177,178,7,1,0,0,178,
        180,3,36,18,0,179,177,1,0,0,0,179,180,1,0,0,0,180,37,1,0,0,0,181,184,3,
        40,20,0,182,183,7,2,0,0,183,185,3,38,19,0,184,182,1,0,0,0,184,185,1,0,
        0,0,185,39,1,0,0,0,186,187,3,48,24,0,187,188,3,42,21,0,188,191,1,0,0,0,
        189,191,3,42,21,0,190,186,1,0,0,0,190,189,1,0,0,0,191,41,1,0,0,0,192,202,
        5,5,0,0,193,194,5,44,0,0,194,202,6,21,-1,0,195,202,5,6,0,0,196,202,3,44,
        22,0,197,198,5,8,0,0,198,199,3,52,26,0,199,200,5,9,0,0,200,202,1,0,0,0,
        201,192,1,0,0,0,201,193,1,0,0,0,201,195,1,0,0,0,201,196,1,0,0,0,201,197,
        1,0,0,0,202,43,1,0,0,0,203,204,5,32,0,0,204,206,5,8,0,0,205,207,3,28,14,
        0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,9,0,0,209,
        210,6,22,-1,0,210,45,1,0,0,0,211,212,5,33,0,0,212,214,5,8,0,0,213,215,
        3,28,14,0,214,213,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,5,9,
        0,0,217,226,6,23,-1,0,218,219,5,34,0,0,219,221,5,8,0,0,220,222,3,50,25,
        0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,9,0,0,224,
        226,6,23,-1,0,225,211,1,0,0,0,225,218,1,0,0,0,226,47,1,0,0,0,227,228,7,
        1,0,0,228,49,1,0,0,0,229,234,5,44,0,0,230,231,5,28,0,0,231,233,5,44,0,
        0,232,230,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,
        237,1,0,0,0,236,234,1,0,0,0,237,238,6,25,-1,0,238,51,1,0,0,0,239,242,3,
        54,27,0,240,241,7,3,0,0,241,243,3,52,26,0,242,240,1,0,0,0,242,243,1,0,
        0,0,243,53,1,0,0,0,244,247,3,56,28,0,245,246,7,4,0,0,246,248,3,54,27,0,
        247,245,1,0,0,0,247,248,1,0,0,0,248,55,1,0,0,0,249,251,7,5,0,0,250,249,
        1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,3,58,29,0,253,57,1,0,0,
        0,254,255,3,60,30,0,255,59,1,0,0,0,256,260,3,64,32,0,257,258,3,62,31,0,
        258,259,3,64,32,0,259,261,1,0,0,0,260,257,1,0,0,0,260,261,1,0,0,0,261,
        61,1,0,0,0,262,272,5,19,0,0,263,272,5,18,0,0,264,272,5,21,0,0,265,272,
        5,20,0,0,266,272,5,22,0,0,267,272,5,23,0,0,268,272,5,41,0,0,269,270,5,
        41,0,0,270,272,5,42,0,0,271,262,1,0,0,0,271,263,1,0,0,0,271,264,1,0,0,
        0,271,265,1,0,0,0,271,266,1,0,0,0,271,267,1,0,0,0,271,268,1,0,0,0,271,
        269,1,0,0,0,272,63,1,0,0,0,273,277,5,43,0,0,274,277,5,31,0,0,275,277,3,
        36,18,0,276,273,1,0,0,0,276,274,1,0,0,0,276,275,1,0,0,0,277,65,1,0,0,0,
        26,74,79,84,89,103,107,148,154,160,165,174,179,184,190,201,206,214,221,
        225,234,242,247,250,260,271,276
    };

        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN);


    }
} // namespace Arcweave.Transpiler
